/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockedERC721, MockedERC721Interface } from "../MockedERC721";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenOfOwnerByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001a8d38038062001a8d833981016040819052620000349162000123565b818160006200004483826200021c565b5060016200005382826200021c565b5050505050620002e8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008657600080fd5b81516001600160401b0380821115620000a357620000a36200005e565b604051601f8301601f19908116603f01168101908282118183101715620000ce57620000ce6200005e565b81604052838152602092508683858801011115620000eb57600080fd5b600091505b838210156200010f5785820183015181830184015290820190620000f0565b600093810190920192909252949350505050565b600080604083850312156200013757600080fd5b82516001600160401b03808211156200014f57600080fd5b6200015d8683870162000074565b935060208501519150808211156200017457600080fd5b50620001838582860162000074565b9150509250929050565b600181811c90821680620001a257607f821691505b602082108103620001c357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021757600081815260208120601f850160051c81016020861015620001f25750805b601f850160051c820191505b818110156200021357828155600101620001fe565b5050505b505050565b81516001600160401b038111156200023857620002386200005e565b62000250816200024984546200018d565b84620001c9565b602080601f8311600181146200028857600084156200026f5750858301515b600019600386901b1c1916600185901b17855562000213565b600085815260208120601f198616915b82811015620002b95788860151825594840194600190910190840162000298565b5085821015620002d85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61179580620002f86000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80634f6ccce7116100a257806395d89b411161007157806395d89b4114610242578063a22cb4651461024a578063b88d4fde1461025d578063c87b56dd14610270578063e985e9c51461028357600080fd5b80634f6ccce7146101f65780636352211e146102095780636a6278421461021c57806370a082311461022f57600080fd5b806318160ddd116100e957806318160ddd1461019857806323b872dd146101aa5780632f745c59146101bd57806342842e0e146101d057806342966c68146101e357600080fd5b806301ffc9a71461011b57806306fdde0314610143578063081812fc14610158578063095ea7b314610183575b600080fd5b61012e6101293660046112a6565b6102bf565b60405190151581526020015b60405180910390f35b61014b6102ea565b60405161013a9190611313565b61016b610166366004611326565b61037c565b6040516001600160a01b03909116815260200161013a565b61019661019136600461135b565b6103a3565b005b6008545b60405190815260200161013a565b6101966101b8366004611385565b6104bd565b61019c6101cb36600461135b565b6104ee565b6101966101de366004611385565b610584565b6101966101f1366004611326565b61059f565b61019c610204366004611326565b6105ab565b61016b610217366004611326565b61063e565b61019661022a3660046113c1565b61069e565b61019c61023d3660046113c1565b6106bd565b61014b610743565b6101966102583660046113dc565b610752565b61019661026b36600461142e565b610761565b61014b61027e366004611326565b610799565b61012e61029136600461150a565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b14806102e457506102e48261080d565b92915050565b6060600080546102f99061153d565b80601f01602080910402602001604051908101604052809291908181526020018280546103259061153d565b80156103725780601f1061034757610100808354040283529160200191610372565b820191906000526020600020905b81548152906001019060200180831161035557829003601f168201915b5050505050905090565b60006103878261085d565b506000908152600460205260409020546001600160a01b031690565b60006103ae8261063e565b9050806001600160a01b0316836001600160a01b0316036104205760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061043c575061043c8133610291565b6104ae5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610417565b6104b883836108bc565b505050565b6104c7338261092a565b6104e35760405162461bcd60e51b815260040161041790611577565b6104b88383836109a9565b60006104f9836106bd565b821061055b5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610417565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6104b883838360405180602001604052806000815250610761565b6105a881610b50565b50565b60006105b660085490565b82106106195760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610417565b6008828154811061062c5761062c6115c5565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806102e45760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610417565b600a80546105a89183919060006106b4836115f1565b91905055610bf7565b60006001600160a01b0382166107275760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610417565b506001600160a01b031660009081526003602052604090205490565b6060600180546102f99061153d565b61075d338383610d45565b5050565b61076b338361092a565b6107875760405162461bcd60e51b815260040161041790611577565b61079384848484610e13565b50505050565b60606107a48261085d565b60006107bb60408051602081019091526000815290565b905060008151116107db5760405180602001604052806000815250610806565b806107e584610e46565b6040516020016107f692919061160a565b6040516020818303038152906040525b9392505050565b60006001600160e01b031982166380ac58cd60e01b148061083e57506001600160e01b03198216635b5e139f60e01b145b806102e457506301ffc9a760e01b6001600160e01b03198316146102e4565b6000818152600260205260409020546001600160a01b03166105a85760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610417565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906108f18261063e565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806109368361063e565b9050806001600160a01b0316846001600160a01b0316148061097d57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806109a15750836001600160a01b03166109968461037c565b6001600160a01b0316145b949350505050565b826001600160a01b03166109bc8261063e565b6001600160a01b031614610a205760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610417565b6001600160a01b038216610a825760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610417565b610a8d838383610f47565b610a986000826108bc565b6001600160a01b0383166000908152600360205260408120805460019290610ac1908490611639565b90915550506001600160a01b0382166000908152600360205260408120805460019290610aef90849061164c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000610b5b8261063e565b9050610b6981600084610f47565b610b746000836108bc565b6001600160a01b0381166000908152600360205260408120805460019290610b9d908490611639565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b038216610c4d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610417565b6000818152600260205260409020546001600160a01b031615610cb25760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610417565b610cbe60008383610f47565b6001600160a01b0382166000908152600360205260408120805460019290610ce790849061164c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b816001600160a01b0316836001600160a01b031603610da65760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610417565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610e1e8484846109a9565b610e2a84848484610fff565b6107935760405162461bcd60e51b81526004016104179061165f565b606081600003610e6d5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610e975780610e81816115f1565b9150610e909050600a836116c7565b9150610e71565b60008167ffffffffffffffff811115610eb257610eb2611418565b6040519080825280601f01601f191660200182016040528015610edc576020820181803683370190505b5090505b84156109a157610ef1600183611639565b9150610efe600a866116db565b610f0990603061164c565b60f81b818381518110610f1e57610f1e6115c5565b60200101906001600160f81b031916908160001a905350610f40600a866116c7565b9450610ee0565b6001600160a01b038316610fa257610f9d81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b610fc5565b816001600160a01b0316836001600160a01b031614610fc557610fc58382611100565b6001600160a01b038216610fdc576104b88161119d565b826001600160a01b0316826001600160a01b0316146104b8576104b8828261124c565b60006001600160a01b0384163b156110f557604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906110439033908990889088906004016116ef565b6020604051808303816000875af192505050801561107e575060408051601f3d908101601f1916820190925261107b9181019061172c565b60015b6110db573d8080156110ac576040519150601f19603f3d011682016040523d82523d6000602084013e6110b1565b606091505b5080516000036110d35760405162461bcd60e51b81526004016104179061165f565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506109a1565b506001949350505050565b6000600161110d846106bd565b6111179190611639565b60008381526007602052604090205490915080821461116a576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906111af90600190611639565b600083815260096020526040812054600880549394509092849081106111d7576111d76115c5565b9060005260206000200154905080600883815481106111f8576111f86115c5565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061123057611230611749565b6001900381819060005260206000200160009055905550505050565b6000611257836106bd565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160e01b0319811681146105a857600080fd5b6000602082840312156112b857600080fd5b813561080681611290565b60005b838110156112de5781810151838201526020016112c6565b50506000910152565b600081518084526112ff8160208601602086016112c3565b601f01601f19169290920160200192915050565b60208152600061080660208301846112e7565b60006020828403121561133857600080fd5b5035919050565b80356001600160a01b038116811461135657600080fd5b919050565b6000806040838503121561136e57600080fd5b6113778361133f565b946020939093013593505050565b60008060006060848603121561139a57600080fd5b6113a38461133f565b92506113b16020850161133f565b9150604084013590509250925092565b6000602082840312156113d357600080fd5b6108068261133f565b600080604083850312156113ef57600080fd5b6113f88361133f565b91506020830135801515811461140d57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561144457600080fd5b61144d8561133f565b935061145b6020860161133f565b925060408501359150606085013567ffffffffffffffff8082111561147f57600080fd5b818701915087601f83011261149357600080fd5b8135818111156114a5576114a5611418565b604051601f8201601f19908116603f011681019083821181831017156114cd576114cd611418565b816040528281528a60208487010111156114e657600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561151d57600080fd5b6115268361133f565b91506115346020840161133f565b90509250929050565b600181811c9082168061155157607f821691505b60208210810361157157634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611603576116036115db565b5060010190565b6000835161161c8184602088016112c3565b8351908301906116308183602088016112c3565b01949350505050565b818103818111156102e4576102e46115db565b808201808211156102e4576102e46115db565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b6000826116d6576116d66116b1565b500490565b6000826116ea576116ea6116b1565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611722908301846112e7565b9695505050505050565b60006020828403121561173e57600080fd5b815161080681611290565b634e487b7160e01b600052603160045260246000fdfea26469706673582212201453215e5979422fef9461057edcacaf1a3d2dc5942ee557d5a772534174d1a064736f6c63430008110033";

export class MockedERC721__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockedERC721> {
    return super.deploy(name, symbol, overrides || {}) as Promise<MockedERC721>;
  }
  getDeployTransaction(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  attach(address: string): MockedERC721 {
    return super.attach(address) as MockedERC721;
  }
  connect(signer: Signer): MockedERC721__factory {
    return super.connect(signer) as MockedERC721__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockedERC721Interface {
    return new utils.Interface(_abi) as MockedERC721Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockedERC721 {
    return new Contract(address, _abi, signerOrProvider) as MockedERC721;
  }
}
