/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IMemoryTreeInterface extends ethers.utils.Interface {
  functions: {
    "addMemoryTree(address,uint256,bytes32,string,bytes)": FunctionFragment;
    "addNode(uint256,bytes32,string,bytes)": FunctionFragment;
    "getMemoryNode(uint256)": FunctionFragment;
    "getMemoryTreeDetails(uint256)": FunctionFragment;
    "getSigner()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMemoryTree",
    values: [string, BigNumberish, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addNode",
    values: [BigNumberish, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemoryNode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemoryTreeDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getSigner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addMemoryTree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMemoryNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMemoryTreeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "MemoryNodeAdded(address,uint256,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MemoryNodeAdded"): EventFragment;
}

export type MemoryNodeAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string] & {
    brainAddress: string;
    brainId: BigNumber;
    nodeId: BigNumber;
    nodeHash: string;
  }
>;

export class IMemoryTree extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMemoryTreeInterface;

  functions: {
    addMemoryTree(
      brainAddress: string,
      brainId: BigNumberish,
      nodeHash: BytesLike,
      storageURI: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addNode(
      parentNodeId: BigNumberish,
      nodeHash: BytesLike,
      storageURI: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMemoryNode(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber[], string] & {
          memoryTreeId: BigNumber;
          children: BigNumber[];
          storageURI: string;
        }
      ] & {
        node: [BigNumber, BigNumber[], string] & {
          memoryTreeId: BigNumber;
          children: BigNumber[];
          storageURI: string;
        };
      }
    >;

    getMemoryTreeDetails(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber] & {
          brainAddress: string;
          brainId: BigNumber;
          rootNode: BigNumber;
        }
      ] & {
        details: [string, BigNumber, BigNumber] & {
          brainAddress: string;
          brainId: BigNumber;
          rootNode: BigNumber;
        };
      }
    >;

    getSigner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMemoryTree(
    brainAddress: string,
    brainId: BigNumberish,
    nodeHash: BytesLike,
    storageURI: string,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addNode(
    parentNodeId: BigNumberish,
    nodeHash: BytesLike,
    storageURI: string,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMemoryNode(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[], string] & {
      memoryTreeId: BigNumber;
      children: BigNumber[];
      storageURI: string;
    }
  >;

  getMemoryTreeDetails(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      brainAddress: string;
      brainId: BigNumber;
      rootNode: BigNumber;
    }
  >;

  getSigner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMemoryTree(
      brainAddress: string,
      brainId: BigNumberish,
      nodeHash: BytesLike,
      storageURI: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { treeId: BigNumber; nodeId: BigNumber }
    >;

    addNode(
      parentNodeId: BigNumberish,
      nodeHash: BytesLike,
      storageURI: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMemoryNode(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], string] & {
        memoryTreeId: BigNumber;
        children: BigNumber[];
        storageURI: string;
      }
    >;

    getMemoryTreeDetails(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        brainAddress: string;
        brainId: BigNumber;
        rootNode: BigNumber;
      }
    >;

    getSigner(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "MemoryNodeAdded(address,uint256,uint256,bytes32)"(
      brainAddress?: null,
      brainId?: null,
      nodeId?: null,
      nodeHash?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        brainAddress: string;
        brainId: BigNumber;
        nodeId: BigNumber;
        nodeHash: string;
      }
    >;

    MemoryNodeAdded(
      brainAddress?: null,
      brainId?: null,
      nodeId?: null,
      nodeHash?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        brainAddress: string;
        brainId: BigNumber;
        nodeId: BigNumber;
        nodeHash: string;
      }
    >;
  };

  estimateGas: {
    addMemoryTree(
      brainAddress: string,
      brainId: BigNumberish,
      nodeHash: BytesLike,
      storageURI: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addNode(
      parentNodeId: BigNumberish,
      nodeHash: BytesLike,
      storageURI: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMemoryNode(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMemoryTreeDetails(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSigner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMemoryTree(
      brainAddress: string,
      brainId: BigNumberish,
      nodeHash: BytesLike,
      storageURI: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addNode(
      parentNodeId: BigNumberish,
      nodeHash: BytesLike,
      storageURI: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMemoryNode(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMemoryTreeDetails(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSigner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
