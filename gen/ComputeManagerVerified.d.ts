/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ComputeManagerVerifiedInterface extends ethers.utils.Interface {
  functions: {
    "addComputeOption(uint256,uint256)": FunctionFragment;
    "claimAsto(address,uint256)": FunctionFragment;
    "completeCompute(uint256)": FunctionFragment;
    "computeOptions(uint256)": FunctionFragment;
    "computeRequestManager()": FunctionFragment;
    "getComputeOptionDisbursement(uint256,uint256)": FunctionFragment;
    "getComputeOptionSLA(uint256,uint64,uint64)": FunctionFragment;
    "getComputeOptionUnitCost(uint256,uint64)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setSigner(address)": FunctionFragment;
    "signer()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalComputeOptions()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateComputeOption(uint256,bool,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addComputeOption",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAsto",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeCompute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeOptions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeRequestManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getComputeOptionDisbursement",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getComputeOptionSLA",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getComputeOptionUnitCost",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setSigner", values: [string]): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalComputeOptions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateComputeOption",
    values: [BigNumberish, boolean, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addComputeOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimAsto", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeCompute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeRequestManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComputeOptionDisbursement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComputeOptionSLA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComputeOptionUnitCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalComputeOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateComputeOption",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SignerUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerUpdated"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SignerUpdatedEvent = TypedEvent<[string] & { signer: string }>;

export class ComputeManagerVerified extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ComputeManagerVerifiedInterface;

  functions: {
    addComputeOption(
      unitCost: BigNumberish,
      unitMinutes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAsto(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "completeCompute(uint256)"(
      computeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "completeCompute(uint256,bytes)"(
      computeId: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    computeOptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        enabled: boolean;
        unitCost: BigNumber;
        unitSeconds: BigNumber;
      }
    >;

    computeRequestManager(overrides?: CallOverrides): Promise<[string]>;

    getComputeOptionDisbursement(
      index: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { addresses: string[]; amounts: BigNumber[] }
    >;

    getComputeOptionSLA(
      index: BigNumberish,
      startTime: BigNumberish,
      units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { maxTime: BigNumber }>;

    getComputeOptionUnitCost(
      index: BigNumberish,
      units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cost: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSigner(
      signer_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signer(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalComputeOptions(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateComputeOption(
      computeId: BigNumberish,
      active: boolean,
      unitCost: BigNumberish,
      unitMinutes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addComputeOption(
    unitCost: BigNumberish,
    unitMinutes: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAsto(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "completeCompute(uint256)"(
    computeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "completeCompute(uint256,bytes)"(
    computeId: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  computeOptions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      enabled: boolean;
      unitCost: BigNumber;
      unitSeconds: BigNumber;
    }
  >;

  computeRequestManager(overrides?: CallOverrides): Promise<string>;

  getComputeOptionDisbursement(
    index: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[]] & { addresses: string[]; amounts: BigNumber[] }
  >;

  getComputeOptionSLA(
    index: BigNumberish,
    startTime: BigNumberish,
    units: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getComputeOptionUnitCost(
    index: BigNumberish,
    units: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSigner(
    signer_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalComputeOptions(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateComputeOption(
    computeId: BigNumberish,
    active: boolean,
    unitCost: BigNumberish,
    unitMinutes: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addComputeOption(
      unitCost: BigNumberish,
      unitMinutes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAsto(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "completeCompute(uint256)"(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "completeCompute(uint256,bytes)"(
      computeId: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    computeOptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        enabled: boolean;
        unitCost: BigNumber;
        unitSeconds: BigNumber;
      }
    >;

    computeRequestManager(overrides?: CallOverrides): Promise<string>;

    getComputeOptionDisbursement(
      index: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[]] & { addresses: string[]; amounts: BigNumber[] }
    >;

    getComputeOptionSLA(
      index: BigNumberish,
      startTime: BigNumberish,
      units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComputeOptionUnitCost(
      index: BigNumberish,
      units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setSigner(signer_: string, overrides?: CallOverrides): Promise<void>;

    signer(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalComputeOptions(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateComputeOption(
      computeId: BigNumberish,
      active: boolean,
      unitCost: BigNumberish,
      unitMinutes: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SignerUpdated(address)"(
      signer?: null
    ): TypedEventFilter<[string], { signer: string }>;

    SignerUpdated(
      signer?: null
    ): TypedEventFilter<[string], { signer: string }>;
  };

  estimateGas: {
    addComputeOption(
      unitCost: BigNumberish,
      unitMinutes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAsto(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "completeCompute(uint256)"(
      computeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "completeCompute(uint256,bytes)"(
      computeId: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    computeOptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeRequestManager(overrides?: CallOverrides): Promise<BigNumber>;

    getComputeOptionDisbursement(
      index: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComputeOptionSLA(
      index: BigNumberish,
      startTime: BigNumberish,
      units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComputeOptionUnitCost(
      index: BigNumberish,
      units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSigner(
      signer_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signer(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalComputeOptions(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateComputeOption(
      computeId: BigNumberish,
      active: boolean,
      unitCost: BigNumberish,
      unitMinutes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addComputeOption(
      unitCost: BigNumberish,
      unitMinutes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAsto(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "completeCompute(uint256)"(
      computeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "completeCompute(uint256,bytes)"(
      computeId: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    computeOptions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeRequestManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComputeOptionDisbursement(
      index: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComputeOptionSLA(
      index: BigNumberish,
      startTime: BigNumberish,
      units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComputeOptionUnitCost(
      index: BigNumberish,
      units: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      signer_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalComputeOptions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateComputeOption(
      computeId: BigNumberish,
      active: boolean,
      unitCost: BigNumberish,
      unitMinutes: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
