/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ICoreProtocolInterface extends ethers.utils.Interface {
  functions: {
    "claimAsto(address,uint256)": FunctionFragment;
    "completeTraining(uint256)": FunctionFragment;
    "requestTraining(address,uint256,uint64,bytes32)": FunctionFragment;
    "revokeTraining(uint256)": FunctionFragment;
    "stakeAsto(address,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimAsto",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeTraining",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTraining",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeTraining",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAsto",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "claimAsto", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeTraining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTraining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeTraining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeAsto", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "AccountBalanceCorrected(address,uint256)": EventFragment;
    "DaoFeeUpdated(uint256,uint24)": EventFragment;
    "TrainingCompleted(address,address,uint256)": EventFragment;
    "TrainingRequested(address,address,uint256,uint256,uint256,bytes32)": EventFragment;
    "TrainingRevoked(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountBalanceCorrected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DaoFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrainingCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrainingRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrainingRevoked"): EventFragment;
}

export type AccountBalanceCorrectedEvent = TypedEvent<
  [string, BigNumber] & { account: string; amount: BigNumber }
>;

export type DaoFeeUpdatedEvent = TypedEvent<
  [BigNumber, number] & { minimumFee: BigNumber; percentageFee: number }
>;

export type TrainingCompletedEvent = TypedEvent<
  [string, string, BigNumber] & {
    requester: string;
    studio: string;
    trainingId: BigNumber;
  }
>;

export type TrainingRequestedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string] & {
    requester: string;
    studio: string;
    optionId: BigNumber;
    trainingId: BigNumber;
    trainingUnits: BigNumber;
    trainingHash: string;
  }
>;

export type TrainingRevokedEvent = TypedEvent<
  [string, string, BigNumber] & {
    requester: string;
    studio: string;
    trainingId: BigNumber;
  }
>;

export class ICoreProtocol extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ICoreProtocolInterface;

  functions: {
    claimAsto(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeTraining(
      trainingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestTraining(
      studio: string,
      optionId: BigNumberish,
      units: BigNumberish,
      trainingHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeTraining(
      trainingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeAsto(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimAsto(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeTraining(
    trainingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestTraining(
    studio: string,
    optionId: BigNumberish,
    units: BigNumberish,
    trainingHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeTraining(
    trainingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeAsto(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimAsto(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    completeTraining(
      trainingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requestTraining(
      studio: string,
      optionId: BigNumberish,
      units: BigNumberish,
      trainingHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeTraining(
      trainingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeAsto(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AccountBalanceCorrected(address,uint256)"(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    AccountBalanceCorrected(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    "DaoFeeUpdated(uint256,uint24)"(
      minimumFee?: null,
      percentageFee?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { minimumFee: BigNumber; percentageFee: number }
    >;

    DaoFeeUpdated(
      minimumFee?: null,
      percentageFee?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { minimumFee: BigNumber; percentageFee: number }
    >;

    "TrainingCompleted(address,address,uint256)"(
      requester?: string | null,
      studio?: string | null,
      trainingId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { requester: string; studio: string; trainingId: BigNumber }
    >;

    TrainingCompleted(
      requester?: string | null,
      studio?: string | null,
      trainingId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { requester: string; studio: string; trainingId: BigNumber }
    >;

    "TrainingRequested(address,address,uint256,uint256,uint256,bytes32)"(
      requester?: string | null,
      studio?: string | null,
      optionId?: null,
      trainingId?: null,
      trainingUnits?: null,
      trainingHash?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, string],
      {
        requester: string;
        studio: string;
        optionId: BigNumber;
        trainingId: BigNumber;
        trainingUnits: BigNumber;
        trainingHash: string;
      }
    >;

    TrainingRequested(
      requester?: string | null,
      studio?: string | null,
      optionId?: null,
      trainingId?: null,
      trainingUnits?: null,
      trainingHash?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, string],
      {
        requester: string;
        studio: string;
        optionId: BigNumber;
        trainingId: BigNumber;
        trainingUnits: BigNumber;
        trainingHash: string;
      }
    >;

    "TrainingRevoked(address,address,uint256)"(
      requester?: string | null,
      studio?: string | null,
      trainingId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { requester: string; studio: string; trainingId: BigNumber }
    >;

    TrainingRevoked(
      requester?: string | null,
      studio?: string | null,
      trainingId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { requester: string; studio: string; trainingId: BigNumber }
    >;
  };

  estimateGas: {
    claimAsto(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeTraining(
      trainingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestTraining(
      studio: string,
      optionId: BigNumberish,
      units: BigNumberish,
      trainingHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeTraining(
      trainingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeAsto(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimAsto(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeTraining(
      trainingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestTraining(
      studio: string,
      optionId: BigNumberish,
      units: BigNumberish,
      trainingHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeTraining(
      trainingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeAsto(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
