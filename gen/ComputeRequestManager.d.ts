/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ComputeRequestManagerInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "addNodeCreator(address)": FunctionFragment;
    "asto()": FunctionFragment;
    "claimAsto(address,uint256)": FunctionFragment;
    "completeCompute(uint256)": FunctionFragment;
    "dao()": FunctionFragment;
    "getComputeRequestComputeManagerInfo(uint256)": FunctionFragment;
    "getComputeRequestTimingInfo(uint256)": FunctionFragment;
    "getComputeRequestUserInfo(uint256)": FunctionFragment;
    "getDaoFee(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isComputeRequestOpen(uint256)": FunctionFragment;
    "isComputeRequestSLAExpired(uint256)": FunctionFragment;
    "managerCorrectBalance(address,uint256)": FunctionFragment;
    "managerRevokeCompute(uint256)": FunctionFragment;
    "managerSetDaoFee(uint256,uint24)": FunctionFragment;
    "managerUpdateRequest(uint256,uint256,uint8)": FunctionFragment;
    "managerWithdrawASTO(uint256,address)": FunctionFragment;
    "minimumFee()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "percentageFee()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestCompute(address,uint256,uint64,bytes32)": FunctionFragment;
    "requests(uint256)": FunctionFragment;
    "revokeCompute(uint256)": FunctionFragment;
    "revokeNodeCreator(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setManager(address)": FunctionFragment;
    "stakeAsto(address,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unlockedAsto(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addNodeCreator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "asto", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimAsto",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeCompute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getComputeRequestComputeManagerInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getComputeRequestTimingInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getComputeRequestUserInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDaoFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isComputeRequestOpen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isComputeRequestSLAExpired",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "managerCorrectBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "managerRevokeCompute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "managerSetDaoFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "managerUpdateRequest",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "managerWithdrawASTO",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "percentageFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestCompute",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCompute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeNodeCreator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "setManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakeAsto",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockedAsto",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNodeCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "asto", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimAsto", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeCompute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getComputeRequestComputeManagerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComputeRequestTimingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComputeRequestUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDaoFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isComputeRequestOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isComputeRequestSLAExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerCorrectBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerRevokeCompute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerSetDaoFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerUpdateRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managerWithdrawASTO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minimumFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "percentageFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCompute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeCompute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeNodeCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeAsto", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockedAsto",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AccountBalanceCorrected(address,uint256)": EventFragment;
    "ComputeCompleted(address,address,uint256)": EventFragment;
    "ComputeRequested(address,address,uint256,uint256,uint256,bytes32)": EventFragment;
    "ComputeRevoked(address,address,uint256)": EventFragment;
    "DaoFeeUpdated(uint256,uint24)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountBalanceCorrected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComputeCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComputeRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComputeRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DaoFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type AccountBalanceCorrectedEvent = TypedEvent<
  [string, BigNumber] & { account: string; amount: BigNumber }
>;

export type ComputeCompletedEvent = TypedEvent<
  [string, string, BigNumber] & {
    requester: string;
    computeManager: string;
    computeId: BigNumber;
  }
>;

export type ComputeRequestedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string] & {
    requester: string;
    computeManager: string;
    optionId: BigNumber;
    computeId: BigNumber;
    computeUnits: BigNumber;
    computeHash: string;
  }
>;

export type ComputeRevokedEvent = TypedEvent<
  [string, string, BigNumber] & {
    requester: string;
    computeManager: string;
    computeId: BigNumber;
  }
>;

export type DaoFeeUpdatedEvent = TypedEvent<
  [BigNumber, number] & { minimumFee: BigNumber; percentageFee: number }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class ComputeRequestManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ComputeRequestManagerInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addNodeCreator(
      newNodeCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    asto(overrides?: CallOverrides): Promise<[string]>;

    claimAsto(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeCompute(
      computeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    getComputeRequestComputeManagerInfo(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { computeManager: string; optionId: BigNumber }
    >;

    getComputeRequestTimingInfo(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startTime: BigNumber; computeUnits: BigNumber }
    >;

    getComputeRequestUserInfo(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { requester: string; escrowAmount: BigNumber }
    >;

    getDaoFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { daoFee: BigNumber }>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isComputeRequestOpen(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isComputeRequestSLAExpired(uint256)"(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { expired: boolean; sla: BigNumber }>;

    "isComputeRequestSLAExpired((uint8,address,address,uint256,uint64,uint64,uint256))"(
      request: {
        status: BigNumberish;
        requester: string;
        computeManager: string;
        optionId: BigNumberish;
        startTime: BigNumberish;
        computeUnits: BigNumberish;
        escrowAmount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { expired: boolean; sla: BigNumber }>;

    managerCorrectBalance(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerRevokeCompute(
      computeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerSetDaoFee(
      minimumFee_: BigNumberish,
      percentageFee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerUpdateRequest(
      computeId: BigNumberish,
      escrowAmount: BigNumberish,
      newClosed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    managerWithdrawASTO(
      amount: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minimumFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    percentageFee(overrides?: CallOverrides): Promise<[number]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestCompute(
      computeManager: string,
      optionId: BigNumberish,
      units: BigNumberish,
      computeHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        requester: string;
        computeManager: string;
        optionId: BigNumber;
        startTime: BigNumber;
        computeUnits: BigNumber;
        escrowAmount: BigNumber;
      }
    >;

    revokeCompute(
      computeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeNodeCreator(
      oldNodeCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setManager(
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeAsto(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unlockedAsto(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addNodeCreator(
    newNodeCreator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  asto(overrides?: CallOverrides): Promise<string>;

  claimAsto(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeCompute(
    computeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dao(overrides?: CallOverrides): Promise<string>;

  getComputeRequestComputeManagerInfo(
    computeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { computeManager: string; optionId: BigNumber }
  >;

  getComputeRequestTimingInfo(
    computeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { startTime: BigNumber; computeUnits: BigNumber }
  >;

  getComputeRequestUserInfo(
    computeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber] & { requester: string; escrowAmount: BigNumber }
  >;

  getDaoFee(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isComputeRequestOpen(
    computeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isComputeRequestSLAExpired(uint256)"(
    computeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { expired: boolean; sla: BigNumber }>;

  "isComputeRequestSLAExpired((uint8,address,address,uint256,uint64,uint64,uint256))"(
    request: {
      status: BigNumberish;
      requester: string;
      computeManager: string;
      optionId: BigNumberish;
      startTime: BigNumberish;
      computeUnits: BigNumberish;
      escrowAmount: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { expired: boolean; sla: BigNumber }>;

  managerCorrectBalance(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerRevokeCompute(
    computeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerSetDaoFee(
    minimumFee_: BigNumberish,
    percentageFee_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerUpdateRequest(
    computeId: BigNumberish,
    escrowAmount: BigNumberish,
    newClosed: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  managerWithdrawASTO(
    amount: BigNumberish,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  percentageFee(overrides?: CallOverrides): Promise<number>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestCompute(
    computeManager: string,
    optionId: BigNumberish,
    units: BigNumberish,
    computeHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      status: number;
      requester: string;
      computeManager: string;
      optionId: BigNumber;
      startTime: BigNumber;
      computeUnits: BigNumber;
      escrowAmount: BigNumber;
    }
  >;

  revokeCompute(
    computeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeNodeCreator(
    oldNodeCreator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setManager(
    newManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeAsto(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unlockedAsto(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addNodeCreator(
      newNodeCreator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    asto(overrides?: CallOverrides): Promise<string>;

    claimAsto(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    completeCompute(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dao(overrides?: CallOverrides): Promise<string>;

    getComputeRequestComputeManagerInfo(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { computeManager: string; optionId: BigNumber }
    >;

    getComputeRequestTimingInfo(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startTime: BigNumber; computeUnits: BigNumber }
    >;

    getComputeRequestUserInfo(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { requester: string; escrowAmount: BigNumber }
    >;

    getDaoFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isComputeRequestOpen(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isComputeRequestSLAExpired(uint256)"(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { expired: boolean; sla: BigNumber }>;

    "isComputeRequestSLAExpired((uint8,address,address,uint256,uint64,uint64,uint256))"(
      request: {
        status: BigNumberish;
        requester: string;
        computeManager: string;
        optionId: BigNumberish;
        startTime: BigNumberish;
        computeUnits: BigNumberish;
        escrowAmount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { expired: boolean; sla: BigNumber }>;

    managerCorrectBalance(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    managerRevokeCompute(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    managerSetDaoFee(
      minimumFee_: BigNumberish,
      percentageFee_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    managerUpdateRequest(
      computeId: BigNumberish,
      escrowAmount: BigNumberish,
      newClosed: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    managerWithdrawASTO(
      amount: BigNumberish,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    percentageFee(overrides?: CallOverrides): Promise<number>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestCompute(
      computeManager: string,
      optionId: BigNumberish,
      units: BigNumberish,
      computeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        status: number;
        requester: string;
        computeManager: string;
        optionId: BigNumber;
        startTime: BigNumber;
        computeUnits: BigNumber;
        escrowAmount: BigNumber;
      }
    >;

    revokeCompute(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeNodeCreator(
      oldNodeCreator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setManager(newManager: string, overrides?: CallOverrides): Promise<void>;

    stakeAsto(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unlockedAsto(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AccountBalanceCorrected(address,uint256)"(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    AccountBalanceCorrected(
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { account: string; amount: BigNumber }
    >;

    "ComputeCompleted(address,address,uint256)"(
      requester?: string | null,
      computeManager?: string | null,
      computeId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { requester: string; computeManager: string; computeId: BigNumber }
    >;

    ComputeCompleted(
      requester?: string | null,
      computeManager?: string | null,
      computeId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { requester: string; computeManager: string; computeId: BigNumber }
    >;

    "ComputeRequested(address,address,uint256,uint256,uint256,bytes32)"(
      requester?: string | null,
      computeManager?: string | null,
      optionId?: null,
      computeId?: null,
      computeUnits?: null,
      computeHash?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, string],
      {
        requester: string;
        computeManager: string;
        optionId: BigNumber;
        computeId: BigNumber;
        computeUnits: BigNumber;
        computeHash: string;
      }
    >;

    ComputeRequested(
      requester?: string | null,
      computeManager?: string | null,
      optionId?: null,
      computeId?: null,
      computeUnits?: null,
      computeHash?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, string],
      {
        requester: string;
        computeManager: string;
        optionId: BigNumber;
        computeId: BigNumber;
        computeUnits: BigNumber;
        computeHash: string;
      }
    >;

    "ComputeRevoked(address,address,uint256)"(
      requester?: string | null,
      computeManager?: string | null,
      computeId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { requester: string; computeManager: string; computeId: BigNumber }
    >;

    ComputeRevoked(
      requester?: string | null,
      computeManager?: string | null,
      computeId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { requester: string; computeManager: string; computeId: BigNumber }
    >;

    "DaoFeeUpdated(uint256,uint24)"(
      minimumFee?: null,
      percentageFee?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { minimumFee: BigNumber; percentageFee: number }
    >;

    DaoFeeUpdated(
      minimumFee?: null,
      percentageFee?: null
    ): TypedEventFilter<
      [BigNumber, number],
      { minimumFee: BigNumber; percentageFee: number }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addNodeCreator(
      newNodeCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    asto(overrides?: CallOverrides): Promise<BigNumber>;

    claimAsto(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeCompute(
      computeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    getComputeRequestComputeManagerInfo(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComputeRequestTimingInfo(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComputeRequestUserInfo(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDaoFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isComputeRequestOpen(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isComputeRequestSLAExpired(uint256)"(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isComputeRequestSLAExpired((uint8,address,address,uint256,uint64,uint64,uint256))"(
      request: {
        status: BigNumberish;
        requester: string;
        computeManager: string;
        optionId: BigNumberish;
        startTime: BigNumberish;
        computeUnits: BigNumberish;
        escrowAmount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    managerCorrectBalance(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerRevokeCompute(
      computeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerSetDaoFee(
      minimumFee_: BigNumberish,
      percentageFee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerUpdateRequest(
      computeId: BigNumberish,
      escrowAmount: BigNumberish,
      newClosed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    managerWithdrawASTO(
      amount: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minimumFee(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    percentageFee(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestCompute(
      computeManager: string,
      optionId: BigNumberish,
      units: BigNumberish,
      computeHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requests(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    revokeCompute(
      computeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeNodeCreator(
      oldNodeCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setManager(
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeAsto(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockedAsto(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addNodeCreator(
      newNodeCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    asto(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimAsto(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeCompute(
      computeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getComputeRequestComputeManagerInfo(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComputeRequestTimingInfo(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComputeRequestUserInfo(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDaoFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isComputeRequestOpen(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isComputeRequestSLAExpired(uint256)"(
      computeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isComputeRequestSLAExpired((uint8,address,address,uint256,uint64,uint64,uint256))"(
      request: {
        status: BigNumberish;
        requester: string;
        computeManager: string;
        optionId: BigNumberish;
        startTime: BigNumberish;
        computeUnits: BigNumberish;
        escrowAmount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    managerCorrectBalance(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerRevokeCompute(
      computeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerSetDaoFee(
      minimumFee_: BigNumberish,
      percentageFee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerUpdateRequest(
      computeId: BigNumberish,
      escrowAmount: BigNumberish,
      newClosed: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    managerWithdrawASTO(
      amount: BigNumberish,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minimumFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percentageFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestCompute(
      computeManager: string,
      optionId: BigNumberish,
      units: BigNumberish,
      computeHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeCompute(
      computeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeNodeCreator(
      oldNodeCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setManager(
      newManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeAsto(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockedAsto(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
