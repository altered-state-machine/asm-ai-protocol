/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AssetStatsRegistryPaidInterface extends ethers.utils.Interface {
  functions: {
    "asto()": FunctionFragment;
    "dao()": FunctionFragment;
    "deregisterStats(uint256)": FunctionFragment;
    "getRegistryEntry(uint256)": FunctionFragment;
    "isActive(uint256)": FunctionFragment;
    "listActiveStatsAddresses()": FunctionFragment;
    "owner()": FunctionFragment;
    "registerStats(address)": FunctionFragment;
    "registrationFee()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDao(address)": FunctionFragment;
    "setRegistrationFee(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "asto", values?: undefined): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deregisterStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistryEntry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listActiveStatsAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerStats",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setDao", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRegistrationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "asto", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deregisterStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistryEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listActiveStatsAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRegistrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RegistryEntryAdded(uint256,address)": EventFragment;
    "RegistryEntryRemoved(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistryEntryAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistryEntryRemoved"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RegistryEntryAddedEvent = TypedEvent<
  [BigNumber, string] & { index: BigNumber; statsAddress: string }
>;

export type RegistryEntryRemovedEvent = TypedEvent<
  [BigNumber, string] & { index: BigNumber; statsAddress: string }
>;

export class AssetStatsRegistryPaid extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AssetStatsRegistryPaidInterface;

  functions: {
    asto(overrides?: CallOverrides): Promise<[string]>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    deregisterStats(
      entryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRegistryEntry(
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[string, string] & { statsAddress: string; owner: string }] & {
        entry: [string, string] & { statsAddress: string; owner: string };
      }
    >;

    isActive(
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { active: boolean }>;

    listActiveStatsAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { addresses: string[] }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerStats(
      statsAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registrationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDao(
      dao_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRegistrationFee(
      registrationFee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  asto(overrides?: CallOverrides): Promise<string>;

  dao(overrides?: CallOverrides): Promise<string>;

  deregisterStats(
    entryId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRegistryEntry(
    entryId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { statsAddress: string; owner: string }>;

  isActive(entryId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  listActiveStatsAddresses(overrides?: CallOverrides): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerStats(
    statsAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registrationFee(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDao(
    dao_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRegistrationFee(
    registrationFee_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    asto(overrides?: CallOverrides): Promise<string>;

    dao(overrides?: CallOverrides): Promise<string>;

    deregisterStats(
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRegistryEntry(
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { statsAddress: string; owner: string }>;

    isActive(
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listActiveStatsAddresses(overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerStats(
      statsAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registrationFee(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDao(dao_: string, overrides?: CallOverrides): Promise<void>;

    setRegistrationFee(
      registrationFee_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RegistryEntryAdded(uint256,address)"(
      index?: null,
      statsAddress?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { index: BigNumber; statsAddress: string }
    >;

    RegistryEntryAdded(
      index?: null,
      statsAddress?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { index: BigNumber; statsAddress: string }
    >;

    "RegistryEntryRemoved(uint256,address)"(
      index?: null,
      statsAddress?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { index: BigNumber; statsAddress: string }
    >;

    RegistryEntryRemoved(
      index?: null,
      statsAddress?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { index: BigNumber; statsAddress: string }
    >;
  };

  estimateGas: {
    asto(overrides?: CallOverrides): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    deregisterStats(
      entryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRegistryEntry(
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listActiveStatsAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerStats(
      statsAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registrationFee(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDao(
      dao_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRegistrationFee(
      registrationFee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    asto(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deregisterStats(
      entryId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRegistryEntry(
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActive(
      entryId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listActiveStatsAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerStats(
      statsAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registrationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDao(
      dao_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRegistrationFee(
      registrationFee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
